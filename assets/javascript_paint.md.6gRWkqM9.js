import{_ as i,c as l,o as t,V as a}from"./chunks/framework.9nulytGH.js";const _=JSON.parse('{"title":"关键渲染路径","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"javascript/paint.md","filePath":"javascript/paint.md"}'),o={name:"javascript/paint.md"},e=a('<h1 id="关键渲染路径" tabindex="-1">关键渲染路径 <a class="header-anchor" href="#关键渲染路径" aria-label="Permalink to &quot;关键渲染路径&quot;">​</a></h1><p>浏览器的关键渲染路径（Critical Rendering Path）是指浏览器从收到HTML、CSS和JavaScript代码到最终在屏幕上呈现出网页内容的一系列步骤。 这个过程包括构建DOM树、构建CSSOM树、执行JavaScript、构建渲染树、布局和绘制这几个关键阶段。</p><h3 id="关键渲染路径的步骤" tabindex="-1">关键渲染路径的步骤： <a class="header-anchor" href="#关键渲染路径的步骤" aria-label="Permalink to &quot;关键渲染路径的步骤：&quot;">​</a></h3><ol><li><p><strong>解析HTML构建DOM树</strong>： 浏览器解析HTML文档以构建DOM树，每个HTML标签都会变成DOM树中的一个节点。</p></li><li><p><strong>解析CSS构建CSSOM树</strong>： 同步解析CSS文件并构建CSS对象模型（CSSOM）。CSSOM树反映了所有CSS属性的层次结构。</p></li><li><p><strong>执行JavaScript</strong>： 如果HTML中引用了JavaScript，浏览器会在适当的时候执行脚本。JavaScript可以修改DOM和CSSOM。</p></li><li><p><strong>构建渲染树</strong>： 浏览器将DOM和CSSOM结合起来创建渲染树。这里不包括DOM中不可见元素，比如设置了<code>display: none;</code>的元素。</p></li><li><p><strong>布局（Reflow）</strong>： 浏览器计算渲染树中每个节点的确切位置和大小，这个过程称为布局或回流。</p></li><li><p><strong>绘制（Paint）</strong>： 最后浏览器通过布局信息将每个节点绘制到屏幕上。</p></li></ol><h3 id="优化关键渲染路径" tabindex="-1">优化关键渲染路径： <a class="header-anchor" href="#优化关键渲染路径" aria-label="Permalink to &quot;优化关键渲染路径：&quot;">​</a></h3><p>要优化浏览器的关键渲染路径，必须减少页面渲染所需的步骤数量、减少每个步骤的复杂度或加快步骤的速度。这里有一些常见的优化方法：</p><ol><li><p><strong>减少阻塞渲染的资源</strong>：</p><ul><li>使用<code>&lt;link rel=&quot;preload&quot;&gt;</code>预加载关键资源。</li><li>将CSS放在文档的<code>&lt;head&gt;</code>中以避免重新渲染。</li><li>异步加载或推迟不关键的JavaScript文件。</li></ul></li><li><p><strong>优化CSS和JavaScript</strong>：</p><ul><li>确保CSS选择器高效简洁，减少复杂的选择器以加快匹配过程。</li><li>避免使用耗时的CSS属性，如复杂的阴影或滤镜效果。</li><li>合并和压缩CSS和JavaScript文件来减少文件大小。</li></ul></li><li><p><strong>最小化布局重排</strong>：</p><ul><li>改变DOM元素样式时，尽量减少触发回流的操作。</li><li>使用<code>transform</code>和<code>opacity</code>进行动画处理，这些属性不会触发布局和绘制。</li></ul></li><li><p><strong>优化图像和媒体内容</strong>：</p><ul><li>使用适当尺寸的图像。</li><li>选择正确的图像格式并进行压缩。</li><li>为不同屏幕宽度使用响应式图像。</li></ul></li><li><p><strong>利用浏览器的缓存</strong>：</p><ul><li>为静态资源设置合适的缓存策略。</li><li>使用服务工作者（Service Workers）进行资源的缓存和提供。</li></ul></li><li><p><strong>服务器端优化</strong>：</p><ul><li>使用CDN来分发资源，减少延迟。</li><li>开启GZIP或Brotli压缩。</li><li>配置HTTP/2以优化资源的加载顺序和并行传输。</li></ul></li></ol><p>通过以上优化，可以显著减少网页的加载时间和提高用户体验。要衡量优化效果，可以使用诸如Google PageSpeed Insights、Lighthouse和WebPageTest等工具。这些工具可以提供详细的性能分析报告，并给出具体的优化建议。</p>',8),r=[e];function n(p,s,c,S,d,g){return t(),l("div",null,r)}const h=i(o,[["render",n]]);export{_ as __pageData,h as default};
