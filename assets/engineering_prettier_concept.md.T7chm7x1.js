import{_ as e,c as t,o as i,V as s}from"./chunks/framework.9nulytGH.js";const u=JSON.parse('{"title":"Prettier","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"engineering/prettier/concept.md","filePath":"engineering/prettier/concept.md"}'),a={name:"engineering/prettier/concept.md"},r=s(`<h1 id="prettier" tabindex="-1">Prettier <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;Prettier&quot;">​</a></h1><blockquote><p>Prettier 是一个代码格式化工具，可以<code>自动格式化</code>代码，使其符合一致的编码风格。</p></blockquote><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><p>Prettier 的工作原理基于以下几个步骤：</p><ol><li><strong>解析器解析代码成 AST（抽象语法树）：</strong> Prettier 使用解析器来将代码解析成 AST。AST 是代码的抽象表示，它可以捕获代码的结构和语法，而不是具体的字符。Prettier 支持多种语言，因此会根据代码的语言选择相应的解析器。</li><li><strong>基于 AST 进行修改：</strong> Prettier 在得到 AST 后，会基于一系列的规则来修改 AST，使得代码符合预定义的格式化规范。这些规则包括缩进、换行、空格等。Prettier 的格式化规则是固定的，而不是像 ESLint 那样可配置的。</li><li><strong>AST 转换成新的代码：</strong> 经过修改后的 AST 将会被转换成新的代码字符串。Prettier 会根据 AST 的结构和规则生成新的代码字符串，其中会应用到格式化规则。</li><li><strong>输出格式化后的代码：</strong> 最后，Prettier 将生成的格式化后的代码字符串输出，覆盖原始的代码或者输出到指定的位置。</li></ol><blockquote><p>总的来说，Prettier 的工作原理是将代码解析成 AST，然后基于一系列固定的格式化规则修改 AST，并最终生成新的格式化后的代码。这种基于 AST 的工作方式使得 Prettier 能够更准确地格式化代码，并避免了一些由于规则匹配导致的问题。</p></blockquote><h3 id="prettier-和eslint-冲突解决" tabindex="-1">Prettier 和eslint 冲突解决 <a class="header-anchor" href="#prettier-和eslint-冲突解决" aria-label="Permalink to &quot;Prettier 和eslint 冲突解决&quot;">​</a></h3><blockquote><p>Prettier 和 ESLint 可能会产生冲突，因为它们对代码格式和风格有不同的要求。解决这种冲突的一种常见方法是使用 Prettier 的 eslint 插件，<code>将 Prettier 集成到 ESLint 中</code>。这样，ESLint 将会使用 Prettier 的规则来格式化代码，从而避免冲突。</p></blockquote><p>具体操作步骤如下：</p><ol><li>安装 Prettier 和 eslint 插件：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install --save-dev eslint-plugin-prettier eslint-config-prettier</span></span></code></pre></div></li><li>在 ESLint 的配置文件中（一般是 <code>.eslintrc.js</code>）添加 Prettier 插件和配置：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;plugin:prettier/recommended&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>这里的 <code>plugin:prettier/recommended</code> 是一个 ESLint 扩展，会自动启用 Prettier 的规则。</li><li>确保 Prettier 的配置文件（<code>.prettierrc</code> 或 <code>prettier.config.js</code>）中的规则与 ESLint 的规则一致，避免冲突。</li><li>运行 ESLint 检查并修复代码：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eslint --fix .</span></span></code></pre></div>这会使用 Prettier 的规则对代码进行格式化，并且修复 ESLint 报告的问题。</li></ol><p>通过以上步骤，可以将 Prettier 集成到 ESLint 中，解决它们之间的冲突，并保持代码格式的一致性。</p>`,11),n=[r];function l(p,o,c,h,d,k){return i(),t("div",null,n)}const E=e(a,[["render",l]]);export{u as __pageData,E as default};
