import{_ as e,c as t,o as l,V as o}from"./chunks/framework.9nulytGH.js";const f=JSON.parse('{"title":"生命周期","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"vue/vue2.0/lifecycle.md","filePath":"vue/vue2.0/lifecycle.md"}'),i={name:"vue/vue2.0/lifecycle.md"},r=o('<h1 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h1><blockquote><p>Vue.js 2.0 中的生命周期钩子函数是一组在 Vue 实例生命周期中特定阶段被调用的函数，开发者可以通过这些钩子函数来执行特定的逻辑。</p></blockquote><p>以下是 Vue.js 2.0 中常见的生命周期钩子函数：</p><ol><li><strong>beforeCreate：</strong> 在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</li><li><strong>created：</strong> 在实例创建完成后被立即调用，此时实例已完成数据观测 (data observer)、属性和方法的运算，但尚未挂载到 DOM 中。</li><li><strong>beforeMount：</strong> 在挂载开始之前被调用：相关的 render 函数首次被调用。</li><li><strong>mounted：</strong> 在挂载完成后被调用，此时组件已经挂载到 DOM 中。</li><li><strong>beforeUpdate：</strong> 在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。</li><li><strong>updated：</strong> 在由于数据更改导致的虚拟 DOM 重新渲染和打补丁后会被调用。</li><li><strong>beforeDestroy：</strong> 在实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><strong>destroyed：</strong> 在实例销毁后调用。这个钩子被调用后，Vue 实例指示的所有指令都已解绑，所有事件侦听器被移除，所有子实例也被销毁。</li><li><strong>activated：</strong> &lt;keep-alive&gt; 组件的生命周期钩子，函数组件被激活时调用</li><li><strong>deactivated：</strong> &lt;keep-alive&gt; 组件的生命周期钩子，函数组件被停用时调用</li></ol><blockquote><p>这些生命周期钩子函数提供了灵活的机制，使开发者可以在组件的不同生命周期阶段执行相应的逻辑，从而更好地控制组件的行为和状态。</p></blockquote><h3 id="父子组件之间的生命周期执行顺序" tabindex="-1">父子组件之间的生命周期执行顺序 <a class="header-anchor" href="#父子组件之间的生命周期执行顺序" aria-label="Permalink to &quot;父子组件之间的生命周期执行顺序&quot;">​</a></h3><p>在 Vue.js 中，父子组件之间的生命周期执行顺序如下：</p><ol><li><strong>父组件：</strong><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li></ul></li><li><strong>子组件：</strong><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li></ul></li><li><strong>父组件：</strong><ul><li>mounted</li></ul></li></ol><blockquote><p>这意味着父组件的生命周期钩子在子组件的生命周期钩子之前执行。在父组件的 <code>mounted</code> 钩子执行后，子组件的 <code>mounted</code> 钩子才会被触发。</p></blockquote><h3 id="父子组件之间的生命周期更新执行顺序" tabindex="-1">父子组件之间的生命周期更新执行顺序 <a class="header-anchor" href="#父子组件之间的生命周期更新执行顺序" aria-label="Permalink to &quot;父子组件之间的生命周期更新执行顺序&quot;">​</a></h3><p>在 Vue.js 中，父子组件之间的生命周期更新执行顺序如下：</p><ol><li><p><strong>父组件数据更新导致重新渲染：</strong></p><ul><li>beforeUpdate</li><li>子组件：beforeUpdate</li><li>子组件：updated</li><li>updated</li></ul></li><li><p><strong>子组件数据更新导致重新渲染：</strong></p><ul><li>父组件：beforeUpdate</li><li>beforeUpdate</li><li>updated</li><li>父组件：updated</li></ul></li></ol><blockquote><p>这意味着在父子组件之间，父组件的更新会在子组件之前触发，而子组件的更新会在父组件之后触发。</p></blockquote>',13),a=[r];function n(s,d,u,c,p,g){return l(),t("div",null,a)}const _=e(i,[["render",n]]);export{f as __pageData,_ as default};
