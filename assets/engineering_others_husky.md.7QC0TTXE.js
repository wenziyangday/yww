import{_ as s,c as i,o as t,V as a}from"./chunks/framework.9nulytGH.js";const d=JSON.parse('{"title":"Husky","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"engineering/others/husky.md","filePath":"engineering/others/husky.md"}'),l={name:"engineering/others/husky.md"},n=a(`<h1 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;Husky&quot;">​</a></h1><blockquote><p>Husky 是一个用于在 Git 提交钩子中运行脚本的工具，它允许开发者在提交代码前或者提交后执行自定义的脚本任务，例如代码格式化、代码检查、测试等。</p></blockquote><h3 id="配置husky" tabindex="-1">配置husky <a class="header-anchor" href="#配置husky" aria-label="Permalink to &quot;配置husky&quot;">​</a></h3><p>在项目中配置 Husky 通常需要以下几个步骤：</p><ol><li><p><strong>安装 Husky：</strong> 首先，需要在项目中安装 Husky。可以通过 npm 或 yarn 安装 Husky：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install husky --save-dev</span></span></code></pre></div><p>或者</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add husky --dev</span></span></code></pre></div></li><li><p><strong>配置 package.json：</strong> 在项目的 package.json 文件中添加 husky 字段，配置需要执行的钩子和相应的脚本。例如，在提交代码前执行 lint 和格式化操作：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;husky&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;hooks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pre-commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint-staged&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这里假设使用 lint-staged 来对暂存区中的文件进行 lint 和格式化操作。</p></li><li><p><strong>配置 lint-staged：</strong> 如果使用 lint-staged 来对暂存区中的文件进行 lint 和格式化操作，需要在 package.json 中添加 lint-staged 字段，并配置需要执行的 lint 和格式化命令以及对应的文件匹配规则。例如：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;*.{js,jsx,vue}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;eslint --fix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;prettier --write&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>配置其他钩子：</strong> 根据需要，可以配置其他钩子来执行不同的任务。例如，可以在提交代码后运行测试或构建任务。</p></li><li><p><strong>执行配置脚本：</strong> 最后，确保在安装 Husky 并配置 package.json 后执行相应的脚本以生效。</p></li></ol><p>配置完成后，Husky 将在对应的 Git 钩子触发时执行配置的脚本，从而实现代码质量控制、格式化、测试等任务。</p><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><ul><li>Husky 的工作原理主要基于 Git 钩子（Git Hooks）。</li><li>Git 钩子是在特定的 Git 事件（例如提交代码、推送分支等）发生时触发执行的脚本。</li><li>Husky 利用了 Git 钩子的这一特性，在项目初始化时会创建一些预定义的 Git 钩子，然后将用户配置的脚本与这些钩子关联起来。</li></ul><blockquote><p>当开发者执行类似提交代码、推送分支等操作时，Git 会自动触发对应的钩子，然后 Husky 就会执行相应的脚本任务。 这样可以在代码提交前或提交后执行一些自定义的操作，比如代码格式化、代码检查、单元测试等，从而帮助团队保持一致的代码质量和风格。</p></blockquote><h3 id="常见的钩子" tabindex="-1">常见的钩子 <a class="header-anchor" href="#常见的钩子" aria-label="Permalink to &quot;常见的钩子&quot;">​</a></h3><p>Husky 中常见的 Git 钩子有以下几种：</p><ol><li><strong>pre-commit</strong>: 在执行 git commit 命令之前触发，用于在提交代码前执行一些任务，比如代码格式化、代码检查等。</li><li><strong>commit-msg</strong>: 在 git commit 操作完成后，但是消息还未写入版本库前触发，用于在提交消息被写入前进行校验或者修改。</li><li><strong>pre-push</strong>: 在执行 git push 命令之前触发，用于在推送代码前执行一些任务，比如运行单元测试、构建项目等。</li><li><strong>pre-rebase</strong>: 在执行 git rebase 操作之前触发，用于在变基操作前执行一些任务。</li><li><strong>pre-merge-commit</strong>: 在执行 git merge 操作之前触发，用于在合并分支前执行一些任务。</li><li><strong>pre-merge-checkout</strong>: 在执行 git merge 操作切换分支之前触发，用于在切换分支前执行一些任务。</li></ol><p>这些钩子允许开发者在特定的 Git 操作发生前或发生后执行自定义的脚本任务，帮助团队保持一致的代码质量和风格。</p><h3 id="概念自查" tabindex="-1">概念自查 <a class="header-anchor" href="#概念自查" aria-label="Permalink to &quot;概念自查&quot;">​</a></h3><ol><li><strong>Husky 是什么？它有什么作用？</strong></li><li><strong>Husky 可以用来做什么？</strong></li><li><strong>Husky 的工作原理是什么？</strong></li><li><strong>如何在项目中配置 Husky？</strong></li><li><strong>Husky 中的常见钩子有哪些？</strong></li><li><strong>如何在提交代码前运行脚本？</strong><ul><li>pre-commit</li></ul></li><li><strong>Husky 如何处理提交信息规范？</strong><ul><li>commit-msg</li></ul></li><li><strong>如何处理提交前的代码检查和格式化？</strong></li><li><strong>如何处理提交后的测试任务？</strong><ul><li>pre-push</li></ul></li><li><strong>Husky 与 Git 钩子有什么区别？</strong><ul><li>Husky 是一个用于管理 Git 钩子的工具，它能够简化在项目中设置和管理 Git 钩子的过程。</li><li>Git 钩子是在特定事件发生时执行的脚本，可以用来触发自定义的操作，比如在提交代码前进行代码检查、格式化等。</li><li>Husky 的主要作用是将 Git 钩子的设置和管理集成到项目的 package.json 文件中，使得团队成员可以更加方便地共享和维护 Git 钩子的配置。</li><li>它可以让开发者在项目中定义一些常用的 Git 钩子，比如 pre-commit、pre-push 等，并指定需要执行的命令，从而在提交或推送代码时自动触发这些命令。</li><li>区别在于，Git 钩子是 Git 自带的功能，可以通过在项目的 <code>.git/hooks</code> 目录下找到对应的脚本文件来配置和使用，而 Husky 是一个独立的第三方工具，可以简化 Git 钩子的配置和管理过程，并且可以在项目的 package.json 文件中定义和配置 Git 钩子。</li></ul></li></ol>`,15),e=[n];function o(p,h,r,k,g,u){return t(),i("div",null,e)}const y=s(l,[["render",o]]);export{d as __pageData,y as default};
