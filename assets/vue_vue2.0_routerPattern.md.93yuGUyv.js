import{_ as s,c as i,o as a,V as n}from"./chunks/framework.9nulytGH.js";const y=JSON.parse('{"title":"路由模式","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"vue/vue2.0/routerPattern.md","filePath":"vue/vue2.0/routerPattern.md"}'),h={name:"vue/vue2.0/routerPattern.md"},t=n(`<h1 id="路由模式" tabindex="-1">路由模式 <a class="header-anchor" href="#路由模式" aria-label="Permalink to &quot;路由模式&quot;">​</a></h1><blockquote><p>在 Vue Router 中，有两种路由模式可以选择：history 模式和 hash 模式。</p></blockquote><h3 id="history-模式" tabindex="-1">History 模式： <a class="header-anchor" href="#history-模式" aria-label="Permalink to &quot;History 模式：&quot;">​</a></h3><ul><li>使用浏览器的 History API 来管理路由，不会在 URL 中出现 # 符号。</li><li>通过监听浏览器的 <code>popstate</code> 事件来实现路由的切换。</li><li>需要服务器端配置，以确保在直接访问路由时，服务器能够正确地返回对应的页面。</li><li>优点是 URL 看起来更加美观，没有 # 符号，更符合传统网站的 URL 结构。</li><li>缺点是在不支持 History API 的浏览器中，可能无法正常使用。</li></ul><h3 id="hash-模式" tabindex="-1">Hash 模式： <a class="header-anchor" href="#hash-模式" aria-label="Permalink to &quot;Hash 模式：&quot;">​</a></h3><ul><li>URL 中的路径会以 # 符号开始，例如 <code>example.com/#/home</code>。</li><li>通过监听浏览器的 <code>hashchange</code> 事件来实现路由的切换。</li><li>不需要服务器端配置，可以直接在前端应用中使用。</li><li>兼容性更好，支持大多数现代浏览器和旧版浏览器。</li><li>缺点是 URL 中带有 # 符号，不够美观，不符合传统网站的 URL 结构。</li></ul><blockquote><p>在 Vue Router 中，默认使用 hash 模式，可以通过设置 <code>mode</code> 选项来切换到 history 模式。例如：</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;history&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p>需要注意的是，在使用 history 模式时，如果服务器没有正确配置，可能会导致直接访问路由时出现 404 错误。因此，在使用 history 模式时，需要确保服务器端的配置是正确的。</p></blockquote><h3 id="路由重定向" tabindex="-1">路由重定向 <a class="header-anchor" href="#路由重定向" aria-label="Permalink to &quot;路由重定向&quot;">​</a></h3><blockquote><p>路由重定向是指将用户导航到一个不同的路由地址，通常在用户访问某个路由时，自动重定向到另一个指定的路由地址。在 Vue Router 中，可以通过配置路由的 <code>redirect</code> 属性来实现路由重定向。</p></blockquote><p>具体工作原理如下：</p><ol><li>在路由配置中，可以为某个路由设置 <code>redirect</code> 属性，指定该路由的重定向目标。</li><li>当用户访问该路由时，Vue Router 会自动将用户重定向到设置的目标路由。</li><li>如果设置了动态路由参数，重定向目标也可以是一个函数，根据当前路由动态计算重定向目标。</li></ol><p>示例代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/old-path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    redirect: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/new-path&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 静态路由重定向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/dynamic/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (query.to) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 URL 有查询参数 to，则重定向到该路由</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {path: query.to}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (hash) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 URL 有哈希值，则重定向到哈希值对应的路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {path: hash}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 否则根据路由参数进行重定向</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params: {id: params.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>这样，在用户访问 <code>/old-path</code> 时，会自动重定向到 <code>/new-path</code>；在访问 <code>/dynamic/123?to=/other-path</code> 时，会重定向到 <code>/other-path</code>；在访问 <code>/dynamic/123#baz</code> 时，会重定向到 <code>/dynamic/123#baz</code>；在访问 <code>/dynamic/123</code> 时，会重定向到名为 <code>foo</code> 的路由，并传递参数 <code>id</code> 为 <code>223</code>。</p>`,16),l=[t];function e(p,k,r,d,E,o){return a(),i("div",null,l)}const g=s(h,[["render",e]]);export{y as __pageData,g as default};
