import{_ as e,c as t,o,V as r}from"./chunks/framework.9nulytGH.js";const p=JSON.parse('{"title":"路由守卫（路由拦截）","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"vue/vue2.0/routerEach.md","filePath":"vue/vue2.0/routerEach.md"}'),a={name:"vue/vue2.0/routerEach.md"},u=r('<h1 id="路由守卫-路由拦截" tabindex="-1">路由守卫（路由拦截） <a class="header-anchor" href="#路由守卫-路由拦截" aria-label="Permalink to &quot;路由守卫（路由拦截）&quot;">​</a></h1><blockquote><p>路由拦截是Vue Router的一个核心功能，它允许你在导航到一个新路由前，对导航进行全局或局部的控制和拦截。 通过路由拦截，你可以实现诸如权限验证、页面跳转前的确认提示、路由跳转时的数据加载等功能。 在Vue Router中，路由拦截主要通过全局前置守卫（beforeEach）、全局后置钩子（afterEach）、 路由独享守卫（beforeEnter）以及组件内的导航守卫（beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave）来实现。</p></blockquote><ul><li>全局前置守卫（beforeEach）：在导航触发之前调用，可以用来进行全局的路由拦截和导航控制。</li><li>全局后置钩子（afterEach）：在每个路由导航结束后被调用，无论导航成功还是失败，都会触发。</li><li>路由独享守卫（beforeEnter）：在单个路由配置中定义的钩子函数，用来对该路由进行独立的拦截处理。</li><li>组件内导航守卫： <ul><li>beforeRouteEnter：在路由进入组件前调用，此时组件实例还未创建，无法通过this访问组件实例。</li><li>beforeRouteUpdate：在路由更新时调用，例如从 /user/1 到 /user/2。</li><li>beforeRouteLeave：在路由离开组件前调用，可以用来禁止路由离开或弹出确认提示框。</li></ul></li></ul><p>通过这些拦截机制，你可以灵活地控制路由的跳转行为，实现更复杂的导航逻辑和用户交互。</p>',4),l=[u];function i(c,_,n,s,f,h){return o(),t("div",null,l)}const b=e(a,[["render",i]]);export{p as __pageData,b as default};
