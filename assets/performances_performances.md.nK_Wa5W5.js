import{_ as o,c as l,o as i,V as t}from"./chunks/framework.9nulytGH.js";const _=JSON.parse('{"title":"性能优化记录","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"performances/performances.md","filePath":"performances/performances.md"}'),r={name:"performances/performances.md"},e=t('<h1 id="性能优化记录" tabindex="-1">性能优化记录 <a class="header-anchor" href="#性能优化记录" aria-label="Permalink to &quot;性能优化记录&quot;">​</a></h1><p>前端性能优化通常会从以下几个方面考虑入手：</p><ol><li><p><strong>资源加载优化</strong>：减少HTTP请求次数，使用CDN加速静态资源加载，应用合适的缓存策略。</p></li><li><p><strong>资源体积优化</strong>：压缩图片和文本资源（如CSS、JavaScript文件），启用Gzip压缩等。</p></li><li><p><strong>代码优化</strong>：删除不必要的代码和资源，压缩和合并文件，优化JavaScript执行性能。</p></li><li><p><strong>使用WebP或SVG格式的图片</strong>：这可以减少图片体积同时保持好的质量。</p></li><li><p><strong>延迟加载和按需加载</strong>：对不重要资源进行懒加载，减少首次页面加载时的压力。</p><ul><li>通过延迟加载（Lazy Loading）和按需加载（On-Demand Loading）可以显著提高页面性能，特别是对于那些拥有大量图片、视频或长列表项的页面。以下是一些实现这些技术的方法和技巧：</li></ul><ol><li><p><strong>图片和视频的延迟加载</strong>：</p><ul><li>使用<code>loading=&quot;lazy&quot;</code>属性：HTML5为<code>img</code>和<code>iframe</code>标签引入了原生的懒加载属性。</li><li>使用JavaScript监听滚动事件，当用户滚动到页面的某个区域时再加载那个区域的资源。</li><li>利用Intersection Observer API来检测元素是否进入了视野范围，并在这时开始加载资源。</li></ul></li><li><p><strong>按需加载JS和CSS文件</strong>：</p><ul><li>使用动态导入（Dynamic Imports），例如：<code>import()</code>函数来按需加载JavaScript模块。</li><li>利用分割代码（Code Splitting）技术，将代码分割成多个小块，然后按需加载，这通常与现代前端框架（如React、Vue、Angular）和打包工具（如Webpack）一起使用。</li></ul></li><li><p><strong>无限滚动与分页</strong>：</p><ul><li>实施无限滚动或分页机制加载列表项，当用户滚动到页面底部时，只加载并渲染下一批列表项。</li><li>结合延迟加载，仅当用户接近列表末尾时，才开始加载新内容。</li></ul></li><li><p><strong>组件级的代码拆分</strong>：</p><ul><li>在单页面应用（SPA）中，可以对不同的路由进行代码拆分，使得用户只下载当前路由所需的资源。</li><li>对需要交互才会使用的组件进行懒加载，如模态框、标签页等。</li></ul></li><li><p><strong>使用占位符</strong>：</p><ul><li>在资源被加载和渲染之前，使用适当的占位符（如灰色框、加载动画等）以改善用户体验，并防止页面布局突然变化。</li></ul></li><li><p><strong>服务端支持</strong>：</p><ul><li>有时需要服务端相应地调整API，以便它们能够支持分页或返回部分数据，与前端的按需加载策略相适应。</li></ul></li></ol><ul><li>延迟加载和按需加载的关键是确保当前用户所需的内容是可用的，同时推迟或避免加载用户不太可能立即需要的内容，从而节省带宽，减少初始化加载时间，提升用户体验。</li></ul></li><li><p><strong>CSS和JavaScript的关键渲染路径优化</strong>：避免阻塞渲染的CSS和JS，优先加载关键的CSS和JS。</p></li><li><p><strong>利用浏览器缓存</strong>：通过合理设置HTTP缓存头，使得浏览器能够缓存资源，减少后续访问的加载时间。</p></li><li><p><strong>服务端渲染(SSR)或预渲染</strong>：对于JavaScript密集的应用，服务端渲染可以提前生成HTML内容，加速首次渲染。</p></li><li><p><strong>Web Workers</strong>：使用Web Workers来运行一些CPU密集型或需要后台处理的任务，防止主线程阻塞。</p></li><li><p><strong>优化DOM操作</strong>：减少DOM访问次数，合理编排DOM元素，避免复杂的CSS选择器。</p></li><li><p><strong>网络性能优化</strong>：选择合适的传输协议，如HTTP/2，以优化连接效率。</p></li><li><p><strong>性能监控与分析</strong>：利用工具分析页面加载过程中的瓶颈，进行针对性优化。</p></li></ol><blockquote><p>vue 中使用函数进行返回值处理的，建议使用computed进行单独处理一下，这样可以减少页面部分更新时被联动更新，从而提升性能</p></blockquote><blockquote><p>优化分析工具 Lighthouse 进行页面 分析 重点对 unused byte 进行拆解 按需引入库 预构建、预加载、预读取 vite 工作原理</p></blockquote><blockquote><p>可视区加载，减少不必要的网络请求</p></blockquote>',6),n=[e];function p(s,a,c,g,u,d){return i(),l("div",null,n)}const m=o(r,[["render",p]]);export{_ as __pageData,m as default};
