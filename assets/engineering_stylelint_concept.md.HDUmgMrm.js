import{_ as s,c as i,o as a,V as n}from"./chunks/framework.9nulytGH.js";const g=JSON.parse('{"title":"Stylelint","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"engineering/stylelint/concept.md","filePath":"engineering/stylelint/concept.md"}'),l={name:"engineering/stylelint/concept.md"},t=n(`<h1 id="stylelint" tabindex="-1">Stylelint <a class="header-anchor" href="#stylelint" aria-label="Permalink to &quot;Stylelint&quot;">​</a></h1><blockquote><p>Stylelint 是一个用于检查 CSS 样式表的工具，类似于 ESLint 用于 JavaScript 的作用。它可以帮助团队确保代码风格的一致性，以及发现和修复潜在的问题和错误。</p></blockquote><h3 id="项目配置" tabindex="-1">项目配置 <a class="header-anchor" href="#项目配置" aria-label="Permalink to &quot;项目配置&quot;">​</a></h3><p>在项目中配置 Stylelint 通常需要以下步骤：</p><ol><li><strong>安装 Stylelint</strong>：首先，确保项目中安装了 Stylelint。可以使用 npm 或 yarn 进行安装：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install stylelint --save-dev</span></span></code></pre></div>或者<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add stylelint --dev</span></span></code></pre></div></li><li><strong>创建配置文件</strong>：在项目根目录下创建一个名为 <code>.stylelintrc</code> 或 <code>.stylelintrc.json</code> 的配置文件，用于定义 Stylelint 的配置选项。也可以在 <code>package.json</code> 文件中的 <code>stylelint</code> 字段中直接定义配置。</li><li><strong>配置规则</strong>：在配置文件中定义要使用的规则。可以根据项目需求选择性地启用或禁用规则，也可以修改规则的选项以满足团队的编码约定。</li><li><strong>集成到构建工具</strong>：将 Stylelint 集成到项目的构建工具中，例如 webpack、Gulp 或 Grunt 中。通过配置合适的插件或加载器，使得在构建过程中自动运行 Stylelint，并在发现问题时给出警告或报错信息。</li><li><strong>运行检查</strong>：运行 Stylelint 命令来手动检查样式表文件。可以通过命令行指定要检查的文件或目录：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stylelint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> your-styles.css</span></span></code></pre></div>或者检查整个项目：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stylelint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;**/*.css&quot;</span></span></code></pre></div></li><li><strong>编辑器集成</strong>：安装适用于编辑器的 Stylelint 插件，以便在编辑器中实时检查样式表，并在发现问题时进行提示或修复建议。常见的编辑器插件包括 VSCode 的 Stylelint 插件和 Sublime Text 的 SublimeLinter-Stylelint 插件。</li></ol><blockquote><p>通过以上步骤，可以在项目中配置并使用 Stylelint 来帮助团队保持样式表的一致性和规范性，提高代码质量和开发效率。</p></blockquote><hr><h3 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h3><blockquote><p>Stylelint 的工作原理类似于 ESLint，它通过解析 CSS 样式表并应用一系列配置规则来检查样式表的语法和风格是否符合预期。</p></blockquote><p>其工作原理通常包括以下步骤：</p><ol><li>解析：Stylelint 会将 CSS 样式表解析成抽象语法树（AST），这样可以更轻松地遍历和分析样式表的结构。</li><li>应用规则：Stylelint 会针对解析后的抽象语法树，逐条应用预先定义的规则集。这些规则可以检查语法错误、命名约定、空格缩进、属性顺序等方面的问题。</li><li>报告问题：当检测到样式表中存在不符合规则的部分时，Stylelint 会生成相应的警告或错误信息，并将其报告给用户。</li><li>输出结果：最终，Stylelint 会将检查结果输出到控制台或指定的文件中，供开发人员查看和处理。</li></ol><blockquote><p>通过这种方式，Stylelint 能够帮助开发团队保持 CSS 样式表的一致性和规范性，从而提高代码质量和可维护性。</p></blockquote><hr><h3 id="stylelint可以检查-css-样式表" tabindex="-1">Stylelint可以检查 CSS 样式表 <a class="header-anchor" href="#stylelint可以检查-css-样式表" aria-label="Permalink to &quot;Stylelint可以检查 CSS 样式表&quot;">​</a></h3><p>Stylelint 可以检查 CSS 样式表中的各种方面，包括但不限于：</p><ol><li>语法错误：检查样式表是否存在语法错误，如拼写错误、未闭合的括号等。</li><li>命名约定：检查选择器、类名、ID 名等命名是否符合约定，如驼峰命名、连字符命名等。</li><li>属性顺序：检查样式规则中属性的顺序是否符合约定，如按照字母顺序排列、按照功能分类等。</li><li>空格缩进：检查样式表中是否正确使用了空格缩进，以增强可读性。</li><li>空行：检查样式表中是否存在不必要的空行或缺少空行，以保持代码结构的清晰。</li><li>属性值单位：检查属性值是否使用了正确的单位，如长度单位、时间单位等。</li><li>颜色格式：检查颜色值是否使用了正确的格式，如十六进制、RGB、HSL 等。</li><li>选择器复杂度：检查选择器的复杂度是否过高，以提高性能和可维护性。</li><li>注释规范：检查注释的使用是否符合规范，如注释内容、注释位置等。</li></ol><p>这些检查可以帮助开发团队保持样式表的一致性、规范性和可维护性，从而提高项目的质量和开发效率。</p><hr><h3 id="常见配置" tabindex="-1">常见配置 <a class="header-anchor" href="#常见配置" aria-label="Permalink to &quot;常见配置&quot;">​</a></h3><blockquote><p>Stylelint 提供了丰富的配置选项，可以根据项目需求进行灵活配置。</p></blockquote><p>以下是一些常见的 Stylelint 配置选项以及如何配置它们：</p><ol><li><p><strong>rules</strong>: 用于配置规则。可以针对每个规则设置一个值，比如 <code>&quot;rule-name&quot;: &quot;value&quot;</code>。规则名称和值之间用冒号分隔，多个规则之间用逗号分隔。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;color-no-invalid-hex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declaration-block-no-duplicate-properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declaration-block-trailing-semicolon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>extends</strong>: 用于扩展已经定义好的配置。可以是一个字符串，指向已经定义的配置，也可以是一个包含多个配置路径的数组。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylelint-config-standard&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>plugins</strong>: 用于加载 Stylelint 插件。可以是一个字符串，指向插件名称，也可以是一个包含多个插件名称的数组。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;stylelint-scss&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>ignoreFiles</strong>: 用于指定需要忽略的文件或目录。可以是一个文件路径、目录路径或者一个匹配模式的数组。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;ignoreFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;**/*.min.css&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;node_modules/**/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>defaultSeverity</strong>: 用于设置规则的默认严重性。可以是 &quot;error&quot;、&quot;warning&quot; 或者 null。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;defaultSeverity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>reportNeedlessDisables</strong>: 用于控制是否报告不必要的禁用注释。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;reportNeedlessDisables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>customSyntax</strong>: 用于定义自定义的语法解析器。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;customSyntax&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stylelint-custom-scss&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>formatter</strong>: 用于指定报告输出的格式。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;formatter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>overrides</code> 是 Stylelint 配置中的一个选项，用于针对特定文件或文件夹覆盖全局配置。它允许你在某些情况下针对特定的文件或文件夹应用不同的规则或配置。</p><p>通常，<code>overrides</code> 选项是一个包含多个对象的数组，每个对象表示一个覆盖规则。每个对象可以包含以下属性：</p><ul><li><strong>files</strong>（必需）：用于指定需要覆盖配置的文件或文件夹。可以是一个文件路径、目录路径或者一个匹配模式的数组。</li><li><strong>rules</strong>：覆盖的规则配置。你可以在这里定义覆盖规则的具体配置。</li><li><strong>extends</strong>：覆盖的配置继承。你可以在这里引用已经定义好的配置，或者使用数组引用多个配置。</li></ul><p>以下是一个示例，演示了如何在 Stylelint 配置中使用 <code>overrides</code>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;color-no-invalid-hex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;declaration-block-no-duplicate-properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;overrides&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/*.scss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;selector-pseudo-element-no-unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;ignorePseudoElements&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              &quot;ng-deep&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;**/*.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;**/*.jsx&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;plugin:prettier/recommended&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;rules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;no-empty-source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;at-rule-no-unknown&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中：</p><ul><li>第一个 <code>overrides</code> 对象覆盖了所有的 SCSS 文件，添加了一个规则配置来忽略 <code>ng-deep</code> 伪元素。</li><li>第二个 <code>overrides</code> 对象覆盖了所有的 JavaScript 和 JSX 文件，扩展了 Prettier 推荐的配置，并且禁用了 <code>no-empty-source</code> 和 <code>at-rule-no-unknown</code> 规则。</li></ul><p>通过使用 <code>overrides</code>，你可以更灵活地管理你的 Stylelint 配置，根据需要为不同类型的文件应用不同的规则或配置。</p></li></ol><p>以上是一些常见的 Stylelint 配置选项，通过合理配置这些选项，可以满足项目的代码规范检查需求，并提高代码质量和开发效率。</p>`,23),e=[t];function p(h,k,o,r,d,E){return a(),i("div",null,e)}const u=s(l,[["render",p]]);export{g as __pageData,u as default};
