import{_ as e,c as o,o as l,V as a}from"./chunks/framework.9nulytGH.js";const _=JSON.parse('{"title":"数据类型和数据结构","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"javaScript/dataTypes.md","filePath":"javaScript/dataTypes.md"}'),t={name:"javaScript/dataTypes.md"},c=a('<h1 id="数据类型和数据结构" tabindex="-1">数据类型和数据结构 <a class="header-anchor" href="#数据类型和数据结构" aria-label="Permalink to &quot;数据类型和数据结构&quot;">​</a></h1><blockquote><p>JavaScript 中的一些核心概念</p></blockquote><h3 id="变量与数据类型" tabindex="-1">变量与数据类型 <a class="header-anchor" href="#变量与数据类型" aria-label="Permalink to &quot;变量与数据类型&quot;">​</a></h3><ol><li>JavaScript中有哪些基本数据类型？如何检测变量的数据类型？ <ul><li>JavaScript中有7种基本数据类型，包括undefined、null、boolean、number、string、symbol和object。 <ul><li>基本数据类型：undefined、null、boolean、number、string、symbol(ES6 扩展)</li><li>引用数据类型：object</li></ul></li><li>可以使用<code>typeof</code>操作符来检测变量的数据类型。</li></ul></li></ol><hr><h3 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h3><ol><li>数组(Array) <blockquote><p>用于存储一组有序的数据。可以通过索引访问数组中的元素，数组的长度是<code>动态</code>的，可以随时增加或删除元素。</p></blockquote></li><li>对象(Object) <blockquote><p>用于存储键值对（key-value）的集合。对象中的<code>键是唯一</code>的，值可以是任意数据类型，包括基本类型和复杂类型。</p></blockquote></li><li>栈(Stack) <blockquote><p>一种后进先出（LIFO）的数据结构，只允许在<code>栈顶</code>进行插入和删除操作。</p></blockquote></li><li>队列(Queue) <blockquote><p>一种先进先出（FIFO）的数据结构，允许在<code>队尾</code>插入元素，在队头删除元素</p></blockquote></li><li>链表(Linked List) <blockquote><p>由一系列节点组成的数据结构，每个节点<code>包含数据和指向下一个节点的引用</code>。链表可以是单向的、双向的、循环的等形式。</p></blockquote></li><li>树(Tree) <blockquote><p>一种分层数据结构，由节点组成，每个节点<code>包含一个值和指向其子节点的引用</code>。常见的树包括二叉树、二叉搜索树、平衡二叉树等。</p></blockquote></li><li>图(Graph) <blockquote><p>由节点和边组成的一种非线性数据结构，用于表示<code>对象之间的关系</code>。图可以是有向的或无向的，可以有权重（带权图）或无权重。</p></blockquote></li><li>堆(Heap) <blockquote><p>一种<code>特殊的树形</code>数据结构，通常用于实现优先队列。堆分为最大堆和最小堆，最大堆的根节点是所有节点中最大的，最小堆的根节点是所有节点中最小的。</p></blockquote></li><li>哈希表(Hash Table) <blockquote><p>一种通过键（key）直接访问值（value）的数据结构。哈希表通过哈希函数将键映射到表中的一个位置，以实现快速的查找、插入和删除操作。</p></blockquote></li></ol>',7),i=[c];function d(r,u,p,n,s,b){return l(),o("div",null,i)}const q=e(t,[["render",d]]);export{_ as __pageData,q as default};
