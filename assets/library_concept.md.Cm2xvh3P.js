import{_ as s,c as i,o as a,V as n}from"./chunks/framework.9nulytGH.js";const c=JSON.parse('{"title":"组件库搭建","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"library/concept.md","filePath":"library/concept.md"}'),l={name:"library/concept.md"},t=n(`<h1 id="组件库搭建" tabindex="-1">组件库搭建 <a class="header-anchor" href="#组件库搭建" aria-label="Permalink to &quot;组件库搭建&quot;">​</a></h1><h3 id="过程" tabindex="-1">过程 <a class="header-anchor" href="#过程" aria-label="Permalink to &quot;过程&quot;">​</a></h3><p>搭建前端组件库是一个涉及到规划、设计、编码、测试、文档以及维护的过程。 以下是创建前端组件库的一般步骤及实现思路：</p><h3 id="_1-规划" tabindex="-1">1. 规划 <a class="header-anchor" href="#_1-规划" aria-label="Permalink to &quot;1. 规划&quot;">​</a></h3><ul><li><strong>目标明确</strong>: 确定组件库的目标用户（内部开发还是公共社区）和范围（UI组件、工具函数库等）。</li><li><strong>组件设计</strong>: 设计要实现的组件接口和功能，可通过设计稿来指导。</li><li><strong>技术选型</strong>: 选择技术栈(如React, Vue等)、打包工具(如Webpack, Rollup等)、测试框架(如Jest等)。</li></ul><h3 id="_2-搭建开发环境" tabindex="-1">2. 搭建开发环境 <a class="header-anchor" href="#_2-搭建开发环境" aria-label="Permalink to &quot;2. 搭建开发环境&quot;">​</a></h3><ul><li><strong>项目结构</strong>: 创建项目目录结构，包括源代码、测试、示例、文档等。</li><li><strong>配置构建系统</strong>: 设置Webpack或其他构建工具进行代码编译、打包，配置Babel、TypeScript等。</li></ul><h3 id="_3-开发组件" tabindex="-1">3. 开发组件 <a class="header-anchor" href="#_3-开发组件" aria-label="Permalink to &quot;3. 开发组件&quot;">​</a></h3><ul><li><strong>编写组件</strong>: 开始编写实际的组件代码，考虑到可复用性、可可定制性和易用性。</li><li><strong>样式处理</strong>: 确定使用内联样式、CSS-in-JS库或传统的CSS/SASS。</li><li><strong>测试组件</strong>: 实现单元测试以确保组件的稳定性和功能性。</li></ul><h3 id="_4-文档-示例" tabindex="-1">4. 文档 &amp; 示例 <a class="header-anchor" href="#_4-文档-示例" aria-label="Permalink to &quot;4. 文档 &amp; 示例&quot;">​</a></h3><ul><li><strong>撰写文档</strong>: 对每个组件的用法、属性、事件等编写详细文档。</li><li><strong>创建示例</strong>: 通过示例代码演示每个组件的用法。</li></ul><h3 id="_5-配置组件库" tabindex="-1">5. 配置组件库 <a class="header-anchor" href="#_5-配置组件库" aria-label="Permalink to &quot;5. 配置组件库&quot;">​</a></h3><ul><li><strong>Peer Dependencies</strong>: 设置外部依赖（例如，如果你的组件库是用React编写的，React和ReactDOM就可能是peer dependencies）。</li><li><strong>发布配置</strong>: 设置NPM scripts，配置package.json，确保可以发布到npm或其他包管理器。</li></ul><h3 id="_6-持续集成与部署" tabindex="-1">6. 持续集成与部署 <a class="header-anchor" href="#_6-持续集成与部署" aria-label="Permalink to &quot;6. 持续集成与部署&quot;">​</a></h3><ul><li><strong>CI/CD</strong>: 设置持续集成和持续部署流程，如使用Travis CI、Jenkins或GitHub Actions自动化测试和发布。</li></ul><h3 id="_7-版本管理与发布" tabindex="-1">7. 版本管理与发布 <a class="header-anchor" href="#_7-版本管理与发布" aria-label="Permalink to &quot;7. 版本管理与发布&quot;">​</a></h3><ul><li><strong>Semantic Versioning</strong>: 遵循语义化版本规则进行版本管理。</li><li><strong>NPM发布</strong>: 使用npm或yarn发布你的组件库。</li></ul><h3 id="_8-维护" tabindex="-1">8. 维护 <a class="header-anchor" href="#_8-维护" aria-label="Permalink to &quot;8. 维护&quot;">​</a></h3><ul><li><strong>处理Issue和PR</strong>: 及时响应社区反馈的问题和合并请求。</li><li><strong>持续迭代</strong>: 根据用户反馈和技术迭代继续更新组件库。</li></ul><h3 id="_9-本地服务器搭建" tabindex="-1">9.本地服务器搭建 <a class="header-anchor" href="#_9-本地服务器搭建" aria-label="Permalink to &quot;9.本地服务器搭建&quot;">​</a></h3><ul><li><strong>服务器</strong>：使用Verdaccio 搭建 npm 私有</li></ul><h3 id="实现代码示例-针对react组件库" tabindex="-1">实现代码示例 (针对React组件库) <a class="header-anchor" href="#实现代码示例-针对react组件库" aria-label="Permalink to &quot;实现代码示例 (针对React组件库)&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json中的一部分配置示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your-component-library&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/index.modern.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;dist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;peerDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^16.8.0 || ^17.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;react-dom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^16.8.0 || ^17.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rollup -c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prepare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;npm run build&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他脚本配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 其他配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="rollup配置示例-部分" tabindex="-1">Rollup配置示例 (部分) <a class="header-anchor" href="#rollup配置示例-部分" aria-label="Permalink to &quot;Rollup配置示例 (部分)&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// rollup.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> babel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;rollup-plugin-babel&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonjs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@rollup/plugin-commonjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolve </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@rollup/plugin-node-resolve&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {terser} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;rollup-plugin-terser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	output: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/index.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			file: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist/index.modern.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			format: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;esm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		babel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({exclude: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;node_modules/**&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		commonjs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		terser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 压缩代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>以上是建立基础前端组件库的大致流程和部分配置示例。具体实现时，每个步骤会更详细且可能因你的具体需求而异。</p>`,26),h=[t];function p(e,k,r,E,o,d){return a(),i("div",null,h)}const u=s(l,[["render",p]]);export{c as __pageData,u as default};
