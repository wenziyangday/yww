import{_ as e,c as t,o,V as a}from"./chunks/framework.9nulytGH.js";const m=JSON.parse('{"title":"基本概念","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"vue/vue2.0/vuexConcept.md","filePath":"vue/vue2.0/vuexConcept.md"}'),i={name:"vue/vue2.0/vuexConcept.md"},c=a('<h1 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h1><blockquote><p>Vuex 是 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 的核心概念包括：</p></blockquote><ol><li>State（状态）：即应用程序的数据源，即所有组件共享的数据。通过 <code>this.$store.state</code> 访问状态。</li><li>Getter（获取器）：允许组件获取 store 中的状态。可以看作是 store 的计算属性。通过 <code>this.$store.getters</code> 访问。</li><li>Mutation（突变）：用于修改 store 中的状态。必须是同步函数。通过 <code>this.$store.commit</code> 提交一个 mutation。</li><li>Action（动作）：类似于 mutation，但是提交的是 mutation，并且可以包含异步操作。通过 <code>this.$store.dispatch</code> 分发一个 action。</li><li>Module（模块）：用于将 store 分割成多个子模块。每个子模块拥有自己的 state、getter、mutation、action。</li><li>Store（存储）：整个应用的状态管理中心，包含以上所有的概念。</li></ol><blockquote><p>这些核心概念共同构成了 Vuex 的状态管理模式，使得 Vue.js 应用程序的状态管理更加清晰、可维护和可扩展。</p></blockquote>',4),s=[c];function r(n,l,u,d,_,p){return o(),t("div",null,s)}const v=e(i,[["render",r]]);export{m as __pageData,v as default};
